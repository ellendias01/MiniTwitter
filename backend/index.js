// Mini Twitter Backend (Express) — stores posts and metrics to Firestore
// Setup:
// 1. Install deps: npm install
// 2. Provide Firebase Admin credentials:
//    - set environment variable GOOGLE_APPLICATION_CREDENTIALS to your service account JSON path
//    or
//    - edit admin.initializeApp(...) below to use explicit credentials.
// 3. Start: npm start

const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const admin = require('firebase-admin');
const morgan = require('morgan');
const { v4: uuidv4 } = require('uuid');

const app = express();
app.use(cors());
app.use(bodyParser.json());
app.use(morgan('dev'));

// Initialize Firebase Admin SDK
// By default it will use GOOGLE_APPLICATION_CREDENTIALS env var pointing to service account JSON
try {
  admin.initializeApp();
  console.log('Firebase Admin initialized with default credentials');
} catch (e) {
  console.warn('Default Firebase init failed — make sure GOOGLE_APPLICATION_CREDENTIALS is set or provide credentials explicitly.');
}

// Firestore reference
const db = admin.firestore();

// Basic health
app.get('/health', (req, res) => res.json({status:'ok', timestamp: new Date().toISOString()}));

/**
 * POSTS CRUD
 * Collection: posts
 * document id: generated by backend (uuid) or use client-provided id
 */
app.post('/posts', async (req, res) => {
  try {
    const data = req.body;
    const id = data.id || uuidv4();
    const docRef = db.collection('posts').doc(id);
    await docRef.set({...data, createdAt: admin.firestore.FieldValue.serverTimestamp()});
    res.status(201).json({id, ...data});
  } catch (err) {
    console.error(err);
    res.status(500).json({error: err.message});
  }
});

app.get('/posts', async (req, res) => {
  try {
    const snapshot = await db.collection('posts').orderBy('createdAt','desc').limit(100).get();
    const posts = [];
    snapshot.forEach(doc => posts.push({id: doc.id, ...doc.data()}));
    res.json(posts);
  } catch (err) {
    res.status(500).json({error: err.message});
  }
});

app.get('/posts/:id', async (req,res) => {
  try {
    const doc = await db.collection('posts').doc(req.params.id).get();
    if (!doc.exists) return res.status(404).json({error:'not found'});
    res.json({id:doc.id, ...doc.data()});
  } catch (err) {
    res.status(500).json({error: err.message});
  }
});

app.put('/posts/:id', async (req,res) => {
  try {
    const data = req.body;
    await db.collection('posts').doc(req.params.id).set({...data, updatedAt: admin.firestore.FieldValue.serverTimestamp()}, {merge:true});
    res.json({id:req.params.id, ...data});
  } catch (err) {
    res.status(500).json({error: err.message});
  }
});

app.delete('/posts/:id', async (req,res) => {
  try {
    await db.collection('posts').doc(req.params.id).delete();
    res.json({deleted: true});
  } catch (err) {
    res.status(500).json({error: err.message});
  }
});

/**
 * METRICS endpoint
 * Accepts payload with 'type' field: 'page_view', 'click', 'load'
 * Examples:
 *  { type: 'page_view', page: '/home', renderTimeMs: 120, userId: 'u1', variant: 'A' }
 *  { type: 'click', elementId: 'like-button', page: '/post/1', userId: 'u1', timestamp: 123456 }
 *  { type: 'load', page: '/heavy', loadTimeMs: 2500, userId: 'u1' }
 */
app.post('/metrics', async (req,res) => {
  try {
    const data = req.body;
    if (!data || !data.type) return res.status(400).json({error:'type required'});
    const now = admin.firestore.FieldValue.serverTimestamp();
    const base = {receivedAt: now, raw: data};
    let col = 'metrics_generic';
    if (data.type === 'page_view') col = 'metrics_pageviews';
    if (data.type === 'click') col = 'metrics_clicks';
    if (data.type === 'load') col = 'metrics_loads';
    const docRef = db.collection(col).doc();
    await docRef.set({...base, ...data});
    res.status(201).json({ok:true, storedIn: col});
  } catch (err) {
    console.error(err);
    res.status(500).json({error: err.message});
  }
});

/**
 * Simple aggregations for dashboard (example)
 */
app.get('/metrics/summary', async (req,res) => {
  try {
    // Return counts of recent metrics (last 24h)
    const since = new Date(Date.now() - 1000*60*60*24);
    const pageSnap = await db.collection('metrics_pageviews').where('receivedAt','>=', admin.firestore.Timestamp.fromDate(since)).get();
    const clickSnap = await db.collection('metrics_clicks').where('receivedAt','>=', admin.firestore.Timestamp.fromDate(since)).get();
    const loadSnap = await db.collection('metrics_loads').where('receivedAt','>=', admin.firestore.Timestamp.fromDate(since)).get();
    res.json({
      pageviewsLast24h: pageSnap.size,
      clicksLast24h: clickSnap.size,
      loadsLast24h: loadSnap.size
    });
  } catch (err) {
    res.status(500).json({error: err.message});
  }
});

const port = process.env.PORT || 4000;
app.listen(port, () => console.log('Server listening on', port));